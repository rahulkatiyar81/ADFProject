{
	"name": "df_Type1_Using_Join",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_emp",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "ds_db_emp",
						"type": "DatasetReference"
					},
					"name": "RefTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_db_emp",
						"type": "DatasetReference"
					},
					"name": "sink"
				},
				{
					"dataset": {
						"referenceName": "ds_db_emp",
						"type": "DatasetReference"
					},
					"name": "tgt"
				}
			],
			"transformations": [
				{
					"name": "Joinempref"
				},
				{
					"name": "ConditionalSplit"
				},
				{
					"name": "AlterRow"
				}
			],
			"script": "source(output(\n\t\tEmpId as integer,\n\t\tName as string,\n\t\tWorkLoc as string,\n\t\tDesignation as string,\n\t\tProject as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source\nsource(output(\n\t\tscdkey as integer,\n\t\tEmpId as integer,\n\t\tEmpName as string,\n\t\tWorkLoc as string,\n\t\tDesignation as string,\n\t\tProject as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> RefTable\nsource, RefTable join(source@EmpId == RefTable@EmpId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Joinempref\nJoinempref split(source@EmpId==RefTable@EmpId,\n\tdisjoint: false) ~> ConditionalSplit@(Matching, NonMatching)\nConditionalSplit@Matching alterRow(updateIf(1==1)) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tscdkey as integer,\n\t\tEmpId as integer,\n\t\tEmpName as string,\n\t\tWorkLoc as string,\n\t\tDesignation as string,\n\t\tProject as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['EmpId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmpId = ConditionalSplit@Matching@EmpId,\n\t\tWorkLoc = ConditionalSplit@Matching@WorkLoc,\n\t\tDesignation = ConditionalSplit@Matching@Designation,\n\t\tProject = ConditionalSplit@Matching@Project\n\t)) ~> sink\nConditionalSplit@NonMatching sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tscdkey as integer,\n\t\tEmpId as integer,\n\t\tEmpName as string,\n\t\tWorkLoc as string,\n\t\tDesignation as string,\n\t\tProject as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmpId = ConditionalSplit@NonMatching@EmpId,\n\t\tEmpName,\n\t\tWorkLoc = ConditionalSplit@NonMatching@WorkLoc,\n\t\tDesignation = ConditionalSplit@NonMatching@Designation,\n\t\tProject = ConditionalSplit@NonMatching@Project\n\t)) ~> tgt"
		}
	}
}